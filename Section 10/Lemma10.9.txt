loadPackage "Schubert2"
B0=base(7,Bundle=>(F,2,"f"), Bundle=>(Hyp,1,"h"), Bundle=>(M,1,"m"), Bundle=>(HypT,1,"zeta"))
B0R=intersectionRing(B0)
PF=flagBundle({1,1},dual(F))
BunPF=bundles(PF)
W=Hyp**Hyp**dual(F)
N=abstractSheaf(PF, ChernClass=>chern_1(dual(M)+(HypT**HypT))-chern_1(W)-chern_1(BunPF#1**Hyp**Hyp), Rank=>1)
Quad=W+(HypT**W)+(M**BunPF#1**Hyp**Hyp)+(HypT**HypT**BunPF#1**Hyp**Hyp)+(HypT**M**BunPF#1**Hyp**Hyp)
fmap=PF.StructureMap
quadramlist0= for i from 0 to 1 list fmap_*((chern_1(BunPF#1))^i*ctop(Quad))
newquadramlist0 = for i from 0 to 1 list toString(quadramlist0#i)


B1=base(7,Bundle=>(T,2,"t"), Bundle=>(F,2,"f"),Bundle=>(Hyp,1,"h"))
B1R=intersectionRing(B1)
PT=flagBundle({1,1},dual(T))
PTR=intersectionRing(PT)
eta=PT.StructureMap
BunPT=bundles(PT)
zeta1=chern_1(BunPT#1)
m1=chern_1(BunPT#0)
quadramlist1=for i from 0 to 1 list (for j from 0 to 1 list eta_*(zeta1^i*value(newquadramlist0#j)))
newquadramlist1 = flatten(for i from 0 to 1 list(for j from 0 to 1 list toString(quadramlist1#i#j)))

B2=base(7,Bundle=>(E,3,"e"),Bundle=>(F,2,"f"),Bundle=>(Hyp2,1,"z"))
B2R=intersectionRing(B2)
PEvee=flagBundle({2,1},E)
PEveeR=intersectionRing(PEvee)
gamma=PEvee.StructureMap
Tgamma=tangentBundle(gamma)
t1=chern_1(Tgamma)
t2=chern_2(Tgamma)
h1=chern_1(OO_PEvee(1))
quadramlist2=for i from 0 to 2 list (for j from 0 to 2 list gamma_*(h1^j*value(newquadramlist1#i)))
newquadramlist2 = flatten(for i from 0 to 2 list (for j from 0 to 2 list toString(quadramlist2#i#j)))

B3=base(7,g,Bundle=>(C,2,"c"), Bundle=>(A,3,"a"), Bundle=>(D,2,"d"), Bundle=>(B,2,"b"))
B3R=intersectionRing(B3)
V=abstractSheaf(B3, ChernClass=>1+c2, Rank=>2)
P=flagBundle({1,1},V)
PR=intersectionRing(P)
p=P.StructureMap
z1=chern_1(OO_P(1))
E=abstractSheaf(P, ChernClass=>1+a1+(g+3)*z1+a2+d1*z1+a3+(g*a2+a1*d1-g*b2-a1*((8*g + 20)*a1 + (-8)*d1)+a2-b2)*z1, Rank=>3)
F=abstractSheaf(P, ChernClass=>1+a1+(g+3)*z1+b2+((8*g + 20)*a1 + (-8)*d1)*z1, Rank=>2)
e1=chern_1(E)
e2=chern_2(E)
e3=chern_3(E)
f1=chern_1(F)
f2=chern_2(F)
quadramlist3=for k from 0 to 1 list (for i from 0 to 8 list p_*(z1^k*value(newquadramlist2#i)))
newquadramlist3 = flatten(for k from 0 to 1 list (for i from 0 to 8 list toString(quadramlist3#k#i)))
Uold=newquadramlist3#0

A=QQ[g]
R=frac(A)
S=R[a1,a2,a3,b2,d1,d2,m1,c2, Degrees=>{{1},{2},{3},{2},{1},{2},{1},{2}}]

I4=ideal((-8*g - 20)*a1 + 8*d1 + m1,(-4)*a1^2 + 8*a2 + b2 + (4*g^2 + 20*g + 24)*c2,((-g - 2)/(g + 1))*a1^2 + (1/(g + 1))*a1*d1 + a2 + (-1/(g + 1))*d2 + (1/3*g^2 + 5/3*g + 2)*c2,(-3/(g^2 + 4*g + 3))*a1^2 + (8/(g^3 + 6*g^2 + 11*g + 6))*d2 + c2,((-8/3*g^2 - 32/3*g - 10)/(g^2 + 4*g + 3))*a1^3 + ((4*g + 6)/(g^2 + 4*g + 3))*a1^2*d1 + ((13/3*g^2 + 41/3*g + 22/3)/(g^3 + 6*g^2 + 11*g + 6))*a1*d2 + (-8/(g^2 + 5*g + 6))*d1*d2 + a3)
I5=ideal((2*g^3 + 9*g^2 + 10*g)*a1^3 + (-8*g^2 - 24*g - 8)*a1*d2,(12*g^3 + 42*g^2 + 36*g)*a1^2*d1 + (-22*g^3 - 121*g^2 - 187*g - 66)*a1*d2 + (-24*g^2 - 24*g)*d1*d2,(432*g^3 + 1512*g^2 + 1296*g)*a1*d1^2 + (-1450*g^3 - 8001*g^2 - 13115*g - 5442)*a1*d2 + (-1584*g^3 - 5544*g^2 - 3936*g)*d1*d2,(121*g^6 + 2143*g^5 + 54887/4*g^4 + 164309/4*g^3 + 58686*g^2 + 33246*g + 1890)*a1^2*d2 + (-1110*g^5 - 10860*g^4 - 77595/2*g^3 - 118845/2*g^2 - 32670*g - 810)*a1*d1*d2+ (1080*g^4 + 7020*g^3 + 14040*g^2 + 8100*g)*d1^2*d2 + (-22*g^5 - 90*g^4 - 181/2*g^3 - 15/2*g^2)*d2^2)
J1=I4+I5
J=minimalPresentation(J1)
f=J1.cache.minimalPresentationMap
Unew=f(U1)
