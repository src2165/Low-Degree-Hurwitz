loadPackage "Schubert2"
B1=base(4,g,Bundle=>(E,2,"e"),Bundle=>(Hyp,1,"z"))
B1R=intersectionRing(B1)
PEvee=flagBundle({1,1},E)
gamma=PEvee.StructureMap
W=OO_PEvee(3)**determinant(dual(E))
Omegagamma=cotangentBundle(gamma)
Omega=abstractSheaf(PEvee, Rank=>2,ChernClass=>chern(Omegagamma)*(1-2*z1))
Delta=W+(W**Omega)
triglist1=for i from 0 to 1 list gamma_*((chern_1(OO_PEvee(1)))^i*ctop(Delta))
newtriglist1 = for i from 0 to 1 list toString(triglist1#i)
h1=chern_1(OO_PEvee(1))
kappalist1=for i from 0 to 2 list gamma_*(ctop(W)*((h1-2*z1)^(i+1)))
newkappalist1=for i from 0 to 2 list toString(kappalist1#i)

B2=base(4,g,Bundle=>(A,2,"a"),Bundle=>(Ap,1,"d"),Bundle=>(C,2,"c"))
B2R=intersectionRing(B2)
V=abstractSheaf(B2,Rank=>2,ChernClass=>1+c2)
P=flagBundle({1,1},V)
PR=intersectionRing(P)
p=P.StructureMap
z1=chern_1(OO_P(1))
E=abstractSheaf(P,Rank=>2,ChernClass=>1+a1+(g+2)*z1+a2+d1*z1)
e1=chern_1(E)
e2=chern_2(E)
triglist2=for i from 0 to 1 list (for j from 0 to 1 list p_*(z1^j*value(newtriglist1#i)))
newtriglist2 = flatten(for i from 0 to 1 list (for j from 0 to 1 list toString(triglist2#i#j)))
kappalist2=for i from 0 to 2 list p_*(value(newkappalist1#i))
newkappalist2=for i from 0 to 2 list toString(kappalist2)
A=QQ[g]
R=frac(A)
S=R[a1,a2,d1,c2, Degrees=>{{1},{2},{1},{2}}]
I=ideal(for i from 0 to 3 list (value(newtriglist2#i)))
I3=I+ideal(g-3,a1^2-1/2*a2-3/2*a1*d1+1/2*d1^2-3*c2)
I4=I+ideal(g-4,
I5=I+ideal(g-5,3*a1^2-1/2*a2-5/2*a1*d1+1/2*d1^2-6*c2)
minimalPresentation(I2)
T=S/I
kappa1=value(newkappalist2#1)
kappa2=value(newkappalist2#2)
Z=minimalPresentation(T)