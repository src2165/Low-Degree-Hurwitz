loadPackage "Schubert2"
B3=base(10,Bundle=>(Hyp2,1,"z"), Bundle=>(F,5,"f"), Bundle=>(E,4,"e"))
B3R=intersectionRing(B3)
PEvee=flagBundle({1,3},dual(E))
PEveeR=intersectionRing(PEvee)
gamma=PEvee.StructureMap
BunPEvee=bundles(PEvee)
H=dual(BunPEvee#0)
zet=chern_1(H)
A1=F**BunPEvee#0**BunPEvee#0
A2=dual(F)**determinant(E)**BunPEvee#0**BunPEvee#0**BunPEvee#0
A3=determinant(E)**BunPEvee#0**BunPEvee#0**BunPEvee#0**BunPEvee#0**BunPEvee#0
C1=-ch_3(A1)
C2=ch_3(A2)
C3=-ch_3(A3)

Curve=C1+C2+C3

kappalist1=for i from 0 to 2 list gamma_*(Curve*((zet-2*z1)^(i+1)))
newkappalist1=for i from 0 to 2 list toString(kappalist1#i)

B4=base(15,g,Bundle=>(A,4,"a"),Bundle=>(D,3,"d"), Bundle=>(B,5,"b"), Bundle=>(M,4,"m"), Bundle=>(C,2,"c"))
B4R=intersectionRing(B4)
V=abstractSheaf(B4, ChernClass=>1+c2, Rank=>2)
P=flagBundle({1,1},V)
PR=intersectionRing(P)
p=P.StructureMap
z1=chern_1(OO_P(1))
E=abstractSheaf(P, ChernClass=>1+a1+(g+4)*z1+a2+d1*z1+a3+d2*z1+a4+d3*z1, Rank=>4)
F=abstractSheaf(P, ChernClass=>1+2*a1+(2*g+8)*z1+b2+m1*z1+b3+m2*z1+b4+m3*z1+b5+m4*z1, Rank=>5)
e1=chern_1(E)
e2=chern_2(E)
e3=chern_3(E)
e4=chern_4(E)
f1=chern_1(F)
f2=chern_2(F)
f3=chern_3(F)
f4=chern_4(F)
f5=chern_5(F)
kappalist2=for i from 0 to 2 list p_*(value(newkappalist1#i))
oldkappa2=kappalist2#1

A=QQ[g]
R=frac(A)
S=R[a1,a2,a3,a4,b2,b3,b4,b5,d1,d2,d3,m1,m2,m3,m4,c2, Degrees=>{{1},{2},{3},{4},{2},{3},{4},{5},{1},{2},{3},{1},{2},{3},{4},{2}}]
I2=ideal(-m1 + (-7)*d1 + (10*g + 36)*a1, 
-b2 + 5*a1^2 + (-7)*a2 + (-5*g^2 - 36*g - 64)*c2,
-d2 + (-g - 3)*a1^2 + a1*d1 + (g + 2)*a2 + (1/3*g^3 + 3*g^2 + 26/3*g + 8)*c2,
-m2 + (99/5*g + 337/5)*a1^2 + (-62/5)*a1*d1 + (-62/5*g - 194/5)*a2 + (-33/5*g^3 - 337/5*g^2 - 1138/5*g - 1272/5)*c2,
-a3 + (-1/3)*a1^3 + a1*a2 + (g^2 + 6*g + 26/3)*a1*c2 + (-g - 2)*d1*c2,
-m3 + (4232/375*g + 3146/75)*a1^3 + (-824/125)*a1^2*d1 + (-1648/125*g - 6422/125)*a1*a2 + 104/25*a2*d1 + (-4232/375*g^3 - 3146/25*g^2 - 34024/75*g - 39712/75)*a1*c2 + (824/125*g^2 + 6422/125*g + 10928/125)*d1*c2,
-d3 + (-676/125*g - 433/25)*a1^3 + 621/125*a1^2*d1 + (1242/125*g + 3888/125)*a1*a2 + (-216/25)*a2*d1 + (676/125*g^3 + 1299/25*g^2 + 4172/25*g + 4496/25)*a1*c2 + (-621/125*g^2 - 3888/125*g - 6312/125)*d1*c2,
-b3 + 33/5*a1^3 + (-62/5)*a1*a2 + (-99/5*g^2 - 674/5*g - 1138/5)*a1*c2 + (62/5*g + 194/5)*d1*c2,
-b4 + 1058/375*a1^4 + (-824/125)*a1^2*a2 + (-2116/125*g^2 - 3146/25*g - 17012/75)*a1^2*c2 + (1648/125*g + 6422/125)*a1*d1*c2 + (-52/25)*d1^2*c2 + 52/25*a2^2 + (824/125*g^2 + 6422/125*g + 10928/125)*a2*c2 + (1058/375*g^4 + 3146/75*g^3 + 17012/75*g^2 + 39712/75*g + 56384/125)*c2^2,
-m4 + (1638/25*g + 24792/125)*a1^4 + (-6542/125)*a1^3*d1 + (-19626/125*g - 54234/125)*a1^2*a2 + 2592/25*a1*a2*d1 + (-3276/25*g^3 - 148752/125*g^2 - 88698/25*g - 17292/5)*a1^2*c2 + (19626/125*g^2 + 108468/125*g + 142648/125)*a1*d1*c2 + (-1296/25*g - 1944/25)*d1^2*c2 + (1296/25*g + 1944/25)*a2^2 + (6542/125*g^3 + 54234/125*g^2 + 142648/125*g + 114576/125)*a2*c2 + (1638/125*g^5 + 24792/125*g^4 + 29566/25*g^3 + 17292/5*g^2 + 615712/125*g + 337728/125)*c2^2,
-a4 + (-169/125)*a1^4 + 621/125*a1^2*a2 + (1014/125*g^2 + 1299/25*g + 2086/25)*a1^2*c2 + (-1242/125*g - 3888/125)*a1*d1*c2 + 108/25*d1^2*c2 + (-108/25)*a2^2 + (-621/125*g^2 - 3888/125*g - 6312/125)*a2*c2 + (-169/125*g^4 - 433/25*g^3 - 2086/25*g^2 - 4496/25*g - 18336/125)*c2^2,
-b5 + 1638/125*a1^5 + (-6542/125)*a1^3*a2 + (-3276/25*g^2 - 99168/125*g - 29566/25)*a1^3*c2 + (19626/125*g + 54234/125)*a1^2*d1*c2 + (-1296/25)*a1*d1^2*c2 + 1296/25*a1*a2^2 + (19626/125*g^2 + 108468/125*g + 142648/125)*a1*a2*c2 + (-2592/25*g - 3888/25)*a2*d1*c2 + (1638/25*g^4 + 99168/125*g^3 + 88698/25*g^2 + 34584/5*g + 615712/125)*a1*c2^2 + (-6542/125*g^3 - 54234/125*g^2 - 142648/125*g - 114576/125)*d1*c2^2,
(1064/5*g + 722)*a1^3 + (-1074/5)*a1^2*d1 + (-2148/5*g - 7272/5)*a1*a2 + 432*a2*d1 + (-1064/5*g^3 - 2166*g^2 - 7336*g - 8272)*a1*c2 + (1074/5*g^2 + 7272/5*g + 12288/5)*d1*c2,
(-6412/15*g - 1417)*a1^3 + 2069/5*a1^2*d1 + (4138/5*g + 13632/5)*a1*a2 + (-792)*a2*d1 + (6412/15*g^3 + 4251*g^2 + 42308/3*g + 15632)*a1*c2 + (-2069/5*g^2 - 13632/5*g - 22728/5)*d1*c2,
(-1523/5*g - 67763/75)*a1^4 + 6047/25*a1^3*d1 + (18141/25*g + 1954)*a1^2*a2 + (-2376/5)*a1*a2*d1 + (3046/5*g^3 + 135526/25*g^2 + 78948/5*g + 224612/15)*a1^2*c2 + (-18141/25*g^2 - 3908*g - 124216/25)*a1*d1*c2 + (1188/5*g + 1656/5)*d1^2*c2 + (-1188/5*g - 1656/5)*a2^2 + (-6047/25*g^3 - 1954*g^2 - 124216/25*g - 94608/25)*a2*c2 + (-1523/25*g^5 - 67763/75*g^4 - 26316/5*g^3 - 224612/15*g^2 - 515392/25*g - 270144/25)*c2^2,
266/5*a1^4 + (-1074/5)*a1^2*a2 + (-1596/5*g^2 - 2166*g - 3668)*a1^2*c2 + (2148/5*g + 7272/5)*a1*d1*c2 + (-216)*d1^2*c2 + 216*a2^2 + (1074/5*g^2 + 7272/5*g + 12288/5)*a2*c2 + (266/5*g^4 + 722*g^3 + 3668*g^2 + 8272*g + 34944/5)*c2^2,
(-3709/15*g - 68407/75)*a1^4 + 5087/25*a1^3*d1 + (15261/25*g + 58622/25)*a1^2*a2 + (-2088/5)*a1*a2*d1 + (7418/15*g^3 + 136814/25*g^2 + 99964/5*g + 72452/3)*a1^2*c2 + (-15261/25*g^2 - 117244/25*g - 220992/25)*a1*d1*c2 + (1044/5*g + 4824/5)*d1^2*c2 + (-1044/5*g - 4824/5)*a2^2 + (-5087/25*g^3 - 58622/25*g^2 - 220992/25*g - 274032/25)*a2*c2 + (-3709/75*g^5 - 68407/75*g^4 - 99964/15*g^3 - 72452/3*g^2 - 1086752/25*g - 778176/25)*c2^2)

J=minimalPresentation(I2)

f=I2.cache.minimalPresentationMap
kappa2=f(oldkappa2)
