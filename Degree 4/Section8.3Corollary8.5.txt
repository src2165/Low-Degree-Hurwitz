loadPackage "Schubert2"
B1=base(7,Bundle=>(T,3,"t"), Bundle=>(F,2,"f"),Bundle=>(Hyp,1,"h"))
B1R=intersectionRing(B1)
G2T=flagBundle({2,1},T)
G2TR=intersectionRing(G2T)
eta=G2T.StructureMap
W=Hyp**Hyp**dual(F)
Bun=bundles(G2T)
S=Bun#0
Delta=eta^*W+(eta^*W**dual(S))
tetlist1=for i from 0 to 2 list eta_*((chern_1(OO_G2T(1)))^i*ctop(Delta))
newtetlist1 = for i from 0 to 2 list toString(tetlist1#i)

B2=base(7,Bundle=>(E,3,"e"),Bundle=>(F,2,"f"),Bundle=>(Hyp2,1,"z"))
B2R=intersectionRing(B2)
PEvee=flagBundle({2,1},E)
PEveeR=intersectionRing(PEvee)
gamma=PEvee.StructureMap
W=OO_PEvee(2)**gamma^*dual(F)
Tgamma=tangentBundle(gamma)
T=abstractSheaf(PEvee,ChernClass=>chern(Tgamma)*(1+2*z1), Rank=>3)
t1=chern_1(T)
t2=chern_2(T)
t3=chern_3(T)
h1=chern_1(OO_PEvee(1))
kappalist1=for i from 1 to 4 list gamma_*(ctop(W)*((h1-2*z1)^(i+1)))
newkappalist1=for i from 0 to 3 list toString(kappalist1#i)
tetlist2=for i from 0 to 2 list (for j from 0 to 2 list gamma_*(h1^j*value(newtetlist1#i)))
newtetlist2 = flatten(for i from 0 to 2 list (for j from 0 to 2 list toString(tetlist2#i#j)))

B3=base(7,g,Bundle=>(C,2,"c"), Bundle=>(A,3,"a"), Bundle=>(D,2,"d"), Bundle=>(B,2,"b"), Bundle=>(M,1,"m"))
B3R=intersectionRing(B3)
V=abstractSheaf(B3, ChernClass=>1+c2, Rank=>2)
P=flagBundle({1,1},V)
PR=intersectionRing(P)
p=P.StructureMap
z1=chern_1(OO_P(1))
E=abstractSheaf(P, ChernClass=>1+a1+(g+3)*z1+a2+d1*z1+a3+d2*z1, Rank=>3)
F=abstractSheaf(P, ChernClass=>1+a1+(g+3)*z1+b2+m1*z1, Rank=>2)
e1=chern_1(E)
e2=chern_2(E)
e3=chern_3(E)
f1=chern_1(F)
f2=chern_2(F)
tetlist3=for k from 0 to 1 list (for i from 0 to 8 list p_*(z1^k*value(newtetlist2#i)))
newtetlist3 = flatten(for k from 0 to 1 list (for i from 0 to 8 list toString(tetlist3#k#i)))
kappalist2=for i from 0 to 3 list p_*(value(newkappalist1#i))
newkappalist2=for i from 0 to 3 list toString(kappalist2#i)
A=QQ[g]
R=frac(A)
S=R[a1,a2,a3,b2,d1,d2,m1,c2, Degrees=>{{1},{2},{3},{2},{1},{2},{1},{2}}]
I=ideal(for i from 0 to 17 list (value(newtetlist3#i)))
--I2=ideal(m1 - (8*g + 20)*a1 + (-8)*d1,a2 - (-1/(g + 1))*a1*d1 + (11/3/(g + 1))*d2, b2 - ((-8*g - 20)/(g + 1))*a1^2 + (8/(g + 1))*a1*d1 + (8/3/(g + 1))*d2, c2 - (3/(g^2 + 4*g + 3))*a1^2 + (-8/(g^3 + 6*g^2 + 11*g + 6))*d2, a3 - ((8/3*g^2 + 32/3*g + 10)/(g^2 + 4*g + 3))*a1^3 + ((-4*g - 6)/(g^2 + 4*g + 3))*a1^2*d1 + ((-13/3*g^2 - 41/3*g - 22/3)/(g^3 + 6*g^2 + 11*g + 6))*a1*d2 + (8/(g^2 + 5*g + 6))*d1*d2)
--I==I2
--I3=ideal((8*g + 20)*a1 + (-8)*d1 - m1, 4*a1^2 + (-8)*a2 - b2 + (-4*g^2 - 20*g - 24)*c2, (-4)*a1*d1 + a1*m1 + (-4*g - 4)*a2 + 12*d2 + (g + 1)*b2, (-12*g - 40)*a1^2 + 12*a1*d1 + 3*a1*m1 + (12*g + 44)*a2 + (-20)*d2 + (3*g + 7)*b2 + (4*g^3 + 40*g^2 + 124*g + 120)*c2, (-4)*a1*a2 + a1*b2 + (4*g + 4)*d1*c2 + (-g - 1)*m1*c2 + 12*a3, (-4)*a1^3 + 12*a1*a2 + 3*a1*b2 + (12*g^2 + 80*g + 124)*a1*c2 + (-12*g - 44)*d1*c2 + (-3*g - 7)*m1*c2 + (-20)*a3, 4*a1^2*d1 + a1^2*m1 + (8*g + 28)*a1*a2 + (-16)*a2*d1 + 6*a1*d2 + (2*g + 6)*a1*b2 + (-14)*d1*b2 + (-14)*a2*m1 + 8*b2*m1 + (-4*g^2 - 28*g - 32)*d1*c2 + (-g^2 - 6*g - 13)*m1*c2 + (6*g + 10)*a3, 2*a1*d2 + d1*b2 + a2*m1 + (-2)*b2*m1 + (2*g - 2)*a3, 8*a1^3 + (-24)*a1*a2 + 2*a1*d2 + (-6)*a1*b2 + (-3)*d1*b2 + (-3)*a2*m1 + 6*b2*m1 + (-24*g^2 - 128*g - 168)*a1*c2 + (24*g + 56)*d1*c2 + (6*g + 10)*m1*c2 + (2*g + 46)*a3, 4*a1^2*a2 + a1^2*b2 + (-8*g - 28)*a1*d1*c2 + 8*d1^2*c2 + (-2*g - 6)*a1*m1*c2 + 14*d1*m1*c2 + (-4)*m1^2*c2 + (-8)*a2^2 + 6*a1*a3 + (-14)*a2*b2 + 4*b2^2 + (-4*g^2 - 28*g - 32)*a2*c2 + (-6*g - 10)*d2*c2 + (-g^2 - 6*g - 13)*b2*c2, -d1*m1*c2 + m1^2*c2 + 2*a1*a3 + a2*b2 - b2^2 + (-2*g + 2)*d2*c2, (-24*g - 64)*a1^2*c2 + 24*a1*d1*c2 + 6*a1*m1*c2 + 3*d1*m1*c2 + (-3)*m1^2*c2 + 2*a1*a3 + (-3)*a2*b2 + 3*b2^2 + (24*g + 56)*a2*c2 + (-2*g - 46)*d2*c2 + (6*g + 10)*b2*c2 + (8*g^3 + 64*g^2 + 168*g + 144)*c2^2, (-6)*a1^2*d2 + a1*d1*b2 + a1*a2*m1 + (-2)*a1*b2*m1 + (-g - 3)*d1*m1*c2 + (g + 3)*m1^2*c2 + (-12*g - 40)*a1*a3 + 8*d1*a3 + 8*a2*d2 + (g + 3)*a2*b2 + 11*d2*b2 + (-g - 3)*b2^2 + 11*a3*m1 + (6*g^2 + 40*g + 50)*d2*c2, (-8)*a1^2*a2 + (-2)*a1^2*b2 + a1*d1*b2 + a1*a2*m1 + (-2)*a1*b2*m1 + (16*g + 40)*a1*d1*c2 + (-16)*d1^2*c2 + (4*g + 16)*a1*m1*c2 + (-g - 31)*d1*m1*c2 + (g + 11)*m1^2*c2 + 16*a2^2 + (-12)*a1*a3 + (g + 31)*a2*b2 + (-3)*d2*b2 + (-g - 11)*b2^2 + (-3)*a3*m1 + (8*g^2 + 40*g + 48)*a2*c2 + (12*g + 68)*d2*c2 + (2*g^2 + 16*g + 30)*b2*c2, -a1*d1*m1*c2 + a1*m1^2*c2 + (-6)*a1^2*a3 + a1*a2*b2 - a1*b2^2 + (12*g + 40)*a1*d2*c2 + (-8)*d1*d2*c2 + (-g - 3)*d1*b2*c2 + (-g - 3)*a2*m1*c2 + (-11)*d2*m1*c2 + (2*g + 6)*b2*m1*c2 + 8*a2*a3 + 11*a3*b2 + (6*g^2 + 40*g + 50)*a3*c2, 8*a1^2*d1*c2 + 2*a1^2*m1*c2 - a1*d1*m1*c2 + a1*m1^2*c2 + a1*a2*b2 - a1*b2^2 + (16*g + 40)*a1*a2*c2 + (-32)*a2*d1*c2 + 12*a1*d2*c2 + (4*g + 16)*a1*b2*c2 + (-g - 31)*d1*b2*c2 + (-g - 31)*a2*m1*c2 + 3*d2*m1*c2 + (2*g + 22)*b2*m1*c2 + (-8*g^2 - 40*g - 48)*d1*c2^2 + (-2*g^2 - 16*g - 30)*m1*c2^2 + (-3)*a3*b2 + (12*g + 68)*a3*c2, 2*a1*d1*m1*c2 - d1^2*m1*c2 + (-2)*a1*m1^2*c2 + 2*d1*m1^2*c2 - m1^3*c2 + 12*a1^2*a3 + (-2)*a1*d1*a3 + (-2)*a1*a2*d2 + (-2)*a1*a2*b2 + 2*a2*d1*b2 + 2*a1*d2*b2 + 2*a1*b2^2 + (-2)*d1*b2^2 + a2^2*m1 + 2*a1*a3*m1 + (-4)*a2*b2*m1 + 3*b2^2*m1 + (-24*g - 72)*a1*d2*c2 + (2*g + 22)*d1*d2*c2 + (2*g + 10)*d1*b2*c2 + (2*g + 10)*a2*m1*c2 + (-2*g + 16)*d2*m1*c2 + (-4*g - 20)*b2*m1*c2 + (-2*g - 22)*a2*a3 + 8*a3*d2 + (2*g - 16)*a3*b2 + (-12*g^2 - 72*g - 108)*a3*c2, (-12)*a1^2*d2*c2 + 2*a1*d1*d2*c2 + 2*a1*d1*b2*c2 - d1^2*b2*c2 + 2*a1*a2*m1*c2 + (-2)*a2*d1*m1*c2 + (-2)*a1*d2*m1*c2 + (-4)*a1*b2*m1*c2 + 4*d1*b2*m1*c2 + 2*a2*m1^2*c2 + (-3)*b2*m1^2*c2 + (-2*g - 10)*d1*m1*c2^2 + (2*g + 10)*m1^2*c2^2 + (-2)*a1*a2*a3 + a2^2*b2 + 2*a1*a3*b2 + (-2)*a2*b2^2 + b2^3 + (-24*g - 72)*a1*a3*c2 + (2*g + 22)*d1*a3*c2 + (2*g + 22)*a2*d2*c2 + (-4)*d2^2*c2 + (2*g + 10)*a2*b2*c2 + (-2*g + 16)*d2*b2*c2 + (-2*g - 10)*b2^2*c2 + (-2*g + 16)*a3*m1*c2 + (12*g^2 + 72*g + 108)*d2*c2^2 + 4*a3^2)

I4=ideal((-8*g - 20)*a1 + 8*d1 + m1,(-4)*a1^2 + 8*a2 + b2 + (4*g^2 + 20*g + 24)*c2,((-g - 2)/(g + 1))*a1^2 + (1/(g + 1))*a1*d1 + a2 + (-1/(g + 1))*d2 + (1/3*g^2 + 5/3*g + 2)*c2,(-3/(g^2 + 4*g + 3))*a1^2 + (8/(g^3 + 6*g^2 + 11*g + 6))*d2 + c2,((-8/3*g^2 - 32/3*g - 10)/(g^2 + 4*g + 3))*a1^3 + ((4*g + 6)/(g^2 + 4*g + 3))*a1^2*d1 + ((13/3*g^2 + 41/3*g + 22/3)/(g^3 + 6*g^2 + 11*g + 6))*a1*d2 + (-8/(g^2 + 5*g + 6))*d1*d2 + a3)
I5=ideal((2*g^3 + 9*g^2 + 10*g)*a1^3 + (-8*g^2 - 24*g - 8)*a1*d2,(12*g^3 + 42*g^2 + 36*g)*a1^2*d1 + (-22*g^3 - 121*g^2 - 187*g - 66)*a1*d2 + (-24*g^2 - 24*g)*d1*d2,(432*g^3 + 1512*g^2 + 1296*g)*a1*d1^2 + (-1450*g^3 - 8001*g^2 - 13115*g - 5442)*a1*d2 + (-1584*g^3 - 5544*g^2 - 3936*g)*d1*d2,(121*g^6 + 2143*g^5 + 54887/4*g^4 + 164309/4*g^3 + 58686*g^2 + 33246*g + 1890)*a1^2*d2 + (-1110*g^5 - 10860*g^4 - 77595/2*g^3 - 118845/2*g^2 - 32670*g - 810)*a1*d1*d2+ (1080*g^4 + 7020*g^3 + 14040*g^2 + 8100*g)*d1^2*d2 + (-22*g^5 - 90*g^4 - 181/2*g^3 - 15/2*g^2)*d2^2)
I==I4+I5
J=minimalPresentation(I4+I5)
apply(9, i->hilbertFunction(i,J))
Jtext=toString(J)
G=R[a1,d1,d2, Degrees=>{{1},{1},{2}}]
newJ=value(Jtext)
Chow=G/newJ